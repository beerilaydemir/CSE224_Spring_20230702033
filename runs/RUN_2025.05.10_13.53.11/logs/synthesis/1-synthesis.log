
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/beeri/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/project2/src/alu.v
Parsing SystemVerilog input from `/openlane/designs/project2/src/alu.v' to AST representation.
Storing AST representation for module `$abstract\alu'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\alu'.
Generating RTLIL representation for module `\alu'.

4.1. Analyzing design hierarchy..
Top module:  \alu

4.2. Analyzing design hierarchy..
Top module:  \alu
Removing unused module `$abstract\alu'.
Removed 1 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/tmp/synthesis/hierarchy.dot'.
Dumping module alu to page 1.
Renaming module alu to alu.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \alu

7.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/openlane/designs/project2/src/alu.v:32$1 in module alu.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/project2/src/alu.v:32$1 in module alu.
Removed a total of 1 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu.$proc$/openlane/designs/project2/src/alu.v:32$1'.
     1/1: $1\out[7:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu.\out' from process `\alu.$proc$/openlane/designs/project2/src/alu.v:32$1'.

16. Executing PROC_DFF pass (convert process syncs to FFs).

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu.$proc$/openlane/designs/project2/src/alu.v:32$1'.
Removing empty process `alu.$proc$/openlane/designs/project2/src/alu.v:32$1'.
Cleaned up 1 empty switch.

19. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

22. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

23. Executing OPT pass (performing simple optimizations).

23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

23.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

23.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

23.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

23.6. Executing OPT_DFF pass (perform DFF optimizations).

23.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

23.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

23.9. Finished OPT passes. (There is nothing left to do.)

24. Executing FSM pass (extract and optimize FSM).

24.1. Executing FSM_DETECT pass (finding FSMs in design).

24.2. Executing FSM_EXTRACT pass (extracting FSM from design).

24.3. Executing FSM_OPT pass (simple optimizations of FSMs).

24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

24.5. Executing FSM_OPT pass (simple optimizations of FSMs).

24.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

24.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

24.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

25.9. Finished OPT passes. (There is nothing left to do.)

26. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$14_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu.$procmux$15_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu.$procmux$16_CMP0 ($eq).

27. Executing PEEPOPT pass (run peephole optimizers).

28. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

29. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  creating $macc model for $add$/openlane/designs/project2/src/alu.v:39$7 ($add).
  creating $macc model for $mul$/openlane/designs/project2/src/alu.v:38$6 ($mul).
  creating $macc model for $sub$/openlane/designs/project2/src/alu.v:40$8 ($sub).
  creating $alu model for $macc $sub$/openlane/designs/project2/src/alu.v:40$8.
  creating $alu model for $macc $add$/openlane/designs/project2/src/alu.v:39$7.
  creating $macc cell for $mul$/openlane/designs/project2/src/alu.v:38$6: $auto$alumacc.cc:365:replace_macc$18
  creating $alu cell for $add$/openlane/designs/project2/src/alu.v:39$7: $auto$alumacc.cc:485:replace_alu$19
  creating $alu cell for $sub$/openlane/designs/project2/src/alu.v:40$8: $auto$alumacc.cc:485:replace_alu$22
  created 2 $alu and 1 $macc cells.

30. Executing SHARE pass (SAT-based resource sharing).

31. Executing OPT pass (performing simple optimizations).

31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

31.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

31.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

31.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

31.6. Executing OPT_DFF pass (perform DFF optimizations).

31.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

31.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

31.9. Finished OPT passes. (There is nothing left to do.)

32. Executing MEMORY pass.

32.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

32.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

32.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

32.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

32.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

32.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

32.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

32.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

32.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

32.10. Executing MEMORY_COLLECT pass (generating $mem cells).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

34. Executing OPT pass (performing simple optimizations).

34.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

34.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

34.3. Executing OPT_DFF pass (perform DFF optimizations).

34.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

34.5. Finished fast OPT passes.

35. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

36.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $procmux$9 in front of them:
        $auto$alumacc.cc:485:replace_alu$22
        $auto$alumacc.cc:485:replace_alu$19

36.7. Executing OPT_DFF pass (perform DFF optimizations).

36.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 6 unused wires.
<suppressed ~1 debug messages>

36.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~1 debug messages>

36.10. Rerunning OPT passes. (Maybe there is more to do..)

36.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

36.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
    New ctrl vector for $pmux cell $procmux$9: { $procmux$16_CMP $procmux$15_CMP $procmux$14_CMP $procmux$13_CMP $auto$opt_reduce.cc:134:opt_pmux$33 $procmux$10_CMP }
  Optimizing cells in module \alu.
Performed a total of 1 changes.

36.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

36.14. Executing OPT_SHARE pass.

36.15. Executing OPT_DFF pass (perform DFF optimizations).

36.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

36.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

36.18. Rerunning OPT passes. (Maybe there is more to do..)

36.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

36.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

36.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

36.22. Executing OPT_SHARE pass.

36.23. Executing OPT_DFF pass (perform DFF optimizations).

36.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

36.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

36.26. Finished OPT passes. (There is nothing left to do.)

37. Executing TECHMAP pass (map to technology primitives).

37.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

37.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using extmapper maccmap for cells of type $macc.
  add \A * \B (8x8 bits, unsigned)
Using template $paramod$e830d104b5de63a966ae948f6aff012e63986700\_90_pmux for cells of type $pmux.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=8:Y_WIDTH=8:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_fa\WIDTH=32'00000000000000000000000000001000 for cells of type $fa.
Using template $paramod$fd7bfb1a4f3a7c2ac1a35670d0fa64ccc7b91841\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~450 debug messages>

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.
<suppressed ~304 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

38.3. Executing OPT_DFF pass (perform DFF optimizations).

38.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 42 unused cells and 256 unused wires.
<suppressed ~43 debug messages>

38.5. Finished fast OPT passes.

39. Executing ABC pass (technology mapping using ABC).

39.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 354 gates and 373 wires to a netlist network with 19 inputs and 8 outputs.

39.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

39.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:       22
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:               AND cells:       20
ABC RESULTS:               XOR cells:       66
ABC RESULTS:              NAND cells:       30
ABC RESULTS:              XNOR cells:       15
ABC RESULTS:               NOR cells:       12
ABC RESULTS:            ANDNOT cells:      101
ABC RESULTS:                OR cells:       53
ABC RESULTS:               MUX cells:       15
ABC RESULTS:        internal signals:      346
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:        8
Removing temp directory.

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 129 unused wires.
<suppressed ~1 debug messages>

40.5. Finished fast OPT passes.

41. Executing HIERARCHY pass (managing design hierarchy).

41.1. Analyzing design hierarchy..
Top module:  \alu

41.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

42. Printing statistics.

=== alu ===

   Number of wires:                337
   Number of wire bits:            360
   Number of public wires:           4
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                341
     $_ANDNOT_                     101
     $_AND_                         20
     $_MUX_                         15
     $_NAND_                        30
     $_NOR_                         12
     $_NOT_                         22
     $_ORNOT_                        7
     $_OR_                          53
     $_XNOR_                        15
     $_XOR_                         66

43. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

44. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/tmp/synthesis/post_techmap.dot'.
Dumping module alu to page 1.

45. Executing SHARE pass (SAT-based resource sharing).

46. Executing OPT pass (performing simple optimizations).

46.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

46.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

46.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

46.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

46.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

46.6. Executing OPT_DFF pass (perform DFF optimizations).

46.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

46.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

46.9. Finished OPT passes. (There is nothing left to do.)

47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

48. Printing statistics.

=== alu ===

   Number of wires:                337
   Number of wire bits:            360
   Number of public wires:           4
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                341
     $_ANDNOT_                     101
     $_AND_                         20
     $_MUX_                         15
     $_NAND_                        30
     $_NOR_                         12
     $_NOT_                         22
     $_ORNOT_                        7
     $_OR_                          53
     $_XNOR_                        15
     $_XOR_                         66

mapping tbuf

49. Executing TECHMAP pass (map to technology primitives).

49.1. Executing Verilog-2005 frontend: /home/beeri/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/beeri/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

50. Executing SIMPLEMAP pass (map simple cells to gate primitives).

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /home/beeri/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/beeri/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

53.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu':

54. Printing statistics.

=== alu ===

   Number of wires:                337
   Number of wire bits:            360
   Number of public wires:           4
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                341
     $_ANDNOT_                     101
     $_AND_                         20
     $_MUX_                         15
     $_NAND_                        30
     $_NOR_                         12
     $_NOT_                         22
     $_ORNOT_                        7
     $_OR_                          53
     $_XNOR_                        15
     $_XOR_                         66

[INFO]: USING STRATEGY AREA 0

55. Executing ABC pass (technology mapping using ABC).

55.1. Extracting gate netlist of module `\alu' to `/tmp/yosys-abc-lctRE5/input.blif'..
Extracted 341 gates and 360 wires to a netlist network with 19 inputs and 8 outputs.

55.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-lctRE5/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-lctRE5/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-lctRE5/input.blif 
ABC: + read_lib -w /openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.04 sec
ABC: Memory =    9.54 MB. Time =     0.04 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (3506.58 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    256 (  7.0 %)   Cap =  9.2 ff (  1.6 %)   Area =     2298.45 ( 93.0 %)   Delay =  3550.88 ps  ( 12.1 %)               
ABC: Path  0 --       7 : 0    4 pi                       A =   0.00  Df =  33.0  -18.2 ps  S =  51.3 ps  Cin =  0.0 ff  Cout =   9.7 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      46 : 1   10 sky130_fd_sc_hd__buf_1   A =   3.75  Df = 335.4 -132.2 ps  S = 362.7 ps  Cin =  2.1 ff  Cout =  30.4 ff  Cmax = 130.0 ff  G = 1401  
ABC: Path  2 --     162 : 4    3 sky130_fd_sc_hd__nand4_2 A =  12.51  Df = 508.0 -147.8 ps  S = 139.0 ps  Cin =  4.4 ff  Cout =   8.4 ff  Cmax = 200.5 ff  G =  187  
ABC: Path  3 --     165 : 3    2 sky130_fd_sc_hd__a21o_2  A =   8.76  Df = 740.0  -24.3 ps  S =  49.2 ps  Cin =  2.4 ff  Cout =   6.9 ff  Cmax = 309.5 ff  G =  284  
ABC: Path  4 --     169 : 3    3 sky130_fd_sc_hd__a21o_2  A =   8.76  Df = 941.2  -91.4 ps  S =  61.6 ps  Cin =  2.4 ff  Cout =   9.6 ff  Cmax = 309.5 ff  G =  390  
ABC: Path  5 --     175 : 3    3 sky130_fd_sc_hd__a21o_2  A =   8.76  Df =1171.2 -175.4 ps  S =  65.5 ps  Cin =  2.4 ff  Cout =  10.5 ff  Cmax = 309.5 ff  G =  434  
ABC: Path  6 --     178 : 3    2 sky130_fd_sc_hd__and3_2  A =   7.51  Df =1354.2 -127.1 ps  S =  62.0 ps  Cin =  1.5 ff  Cout =   6.8 ff  Cmax = 309.5 ff  G =  434  
ABC: Path  7 --     181 : 3    4 sky130_fd_sc_hd__or3_2   A =   7.51  Df =1853.6 -379.9 ps  S = 113.4 ps  Cin =  1.5 ff  Cout =  14.2 ff  Cmax = 310.4 ff  G =  892  
ABC: Path  8 --     245 : 4    2 sky130_fd_sc_hd__a211o_2 A =  10.01  Df =2214.2 -519.1 ps  S =  57.0 ps  Cin =  2.4 ff  Cout =   6.2 ff  Cmax = 325.0 ff  G =  252  
ABC: Path  9 --     274 : 3    2 sky130_fd_sc_hd__or3_2   A =   7.51  Df =2701.7 -671.5 ps  S =  88.6 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 310.4 ff  G =  391  
ABC: Path 10 --     276 : 3    1 sky130_fd_sc_hd__and3_2  A =   7.51  Df =2905.3 -334.1 ps  S =  45.9 ps  Cin =  1.5 ff  Cout =   2.4 ff  Cmax = 309.5 ff  G =  157  
ABC: Path 11 --     278 : 3    1 sky130_fd_sc_hd__o21a_2  A =   8.76  Df =3100.0 -166.6 ps  S =  32.7 ps  Cin =  2.4 ff  Cout =   2.4 ff  Cmax = 294.8 ff  G =   96  
ABC: Path 12 --     283 : 5    1 sky130_fd_sc_hd__o32a_2  A =  11.26  Df =3550.9 -370.1 ps  S = 180.9 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 300.3 ff  G = 1451  
ABC: Start-point = pi6 (\B [1]).  End-point = po7 (\out [7]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   19/    8  lat =    0  nd =   256  edge =    731  area =2298.80  delay =12.00  lev = 12
ABC: + write_blif /tmp/yosys-abc-lctRE5/output.blif 

55.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       20
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        1
ABC RESULTS:        internal signals:      333
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:        8
Removing temp directory.

56. Executing SETUNDEF pass (replace undef values with defined constants).

57. Executing HILOMAP pass (mapping to constant drivers).

58. Executing SPLITNETS pass (splitting up multi-bit signals).

59. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..
Removed 0 unused cells and 360 unused wires.
<suppressed ~1 debug messages>

60. Executing INSBUF pass (insert buffer cells for connected wires).

61. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

62. Printing statistics.

=== alu ===

   Number of wires:                252
   Number of wire bits:            275
   Number of public wires:           4
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2        5
     sky130_fd_sc_hd__a211oi_2       2
     sky130_fd_sc_hd__a21bo_2        8
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2        20
     sky130_fd_sc_hd__a21oi_2       15
     sky130_fd_sc_hd__a22o_2         9
     sky130_fd_sc_hd__a22oi_2        4
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a311o_2        4
     sky130_fd_sc_hd__a31o_2        10
     sky130_fd_sc_hd__and2_2         8
     sky130_fd_sc_hd__and2b_2        5
     sky130_fd_sc_hd__and3_2        13
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         8
     sky130_fd_sc_hd__buf_1         15
     sky130_fd_sc_hd__inv_2          3
     sky130_fd_sc_hd__nand2_2       22
     sky130_fd_sc_hd__nand3_2       13
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        4
     sky130_fd_sc_hd__nor2_2        11
     sky130_fd_sc_hd__o211a_2        2
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2         5
     sky130_fd_sc_hd__o21ai_2        8
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o22a_2         6
     sky130_fd_sc_hd__o2bb2a_2       4
     sky130_fd_sc_hd__o311a_2        2
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__or2_2         10
     sky130_fd_sc_hd__or2b_2         3
     sky130_fd_sc_hd__or3_2          6
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__xnor2_2        9
     sky130_fd_sc_hd__xor2_2         8

   Chip area for module '\alu': 2298.454400

63. Executing Verilog backend.
Dumping module `\alu'.

64. Executing JSON backend.

65. Executing Liberty frontend: /openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/tmp/synthesis/1-sky130_fd_sc_hd__tt_025C_1v80.no_pg.lib
Imported 428 cell types from liberty file.

66. Executing Verilog-2005 frontend: /openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/results/synthesis/alu.v
Parsing SystemVerilog input from `/openlane/designs/project2/runs/RUN_2025.05.10_13.53.11/results/synthesis/alu.v' to AST representation.
Generating RTLIL representation for module `\alu'.
Successfully finished Verilog frontend.

67. Executing SYNTH pass.

67.1. Executing HIERARCHY pass (managing design hierarchy).

67.1.1. Analyzing design hierarchy..
Top module:  \alu

67.1.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

67.2. Executing PROC pass (convert processes to netlists).

67.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

67.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

67.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

67.2.4. Executing PROC_INIT pass (extract init attributes).

67.2.5. Executing PROC_ARST pass (detect async resets in processes).

67.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

67.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

67.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

67.2.9. Executing PROC_DFF pass (convert process syncs to FFs).

67.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

67.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

67.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.3. Executing FLATTEN pass (flatten design).

67.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.6. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

67.7. Executing OPT pass (performing simple optimizations).

67.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

67.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

67.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.7.6. Executing OPT_DFF pass (perform DFF optimizations).

67.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.7.9. Finished OPT passes. (There is nothing left to do.)

67.8. Executing FSM pass (extract and optimize FSM).

67.8.1. Executing FSM_DETECT pass (finding FSMs in design).

67.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

67.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

67.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

67.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

67.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

67.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

67.9. Executing OPT pass (performing simple optimizations).

67.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

67.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

67.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.9.6. Executing OPT_DFF pass (perform DFF optimizations).

67.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.9.9. Finished OPT passes. (There is nothing left to do.)

67.10. Executing WREDUCE pass (reducing word size of cells).

67.11. Executing PEEPOPT pass (run peephole optimizers).

67.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu:
  created 0 $alu and 0 $macc cells.

67.14. Executing SHARE pass (SAT-based resource sharing).

67.15. Executing OPT pass (performing simple optimizations).

67.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

67.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

67.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.15.6. Executing OPT_DFF pass (perform DFF optimizations).

67.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.15.9. Finished OPT passes. (There is nothing left to do.)

67.16. Executing MEMORY pass.

67.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

67.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

67.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

67.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

67.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

67.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

67.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

67.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

67.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.18. Executing OPT pass (performing simple optimizations).

67.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.18.3. Executing OPT_DFF pass (perform DFF optimizations).

67.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.18.5. Finished fast OPT passes.

67.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

67.20. Executing OPT pass (performing simple optimizations).

67.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

67.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu.
Performed a total of 0 changes.

67.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.20.6. Executing OPT_SHARE pass.

67.20.7. Executing OPT_DFF pass (perform DFF optimizations).

67.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.20.10. Finished OPT passes. (There is nothing left to do.)

67.21. Executing TECHMAP pass (map to technology primitives).

67.21.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

67.21.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~73 debug messages>

67.22. Executing OPT pass (performing simple optimizations).

67.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.22.3. Executing OPT_DFF pass (perform DFF optimizations).

67.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.22.5. Finished fast OPT passes.

67.23. Executing ABC pass (technology mapping using ABC).

67.23.1. Extracting gate netlist of module `\alu' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

67.24. Executing OPT pass (performing simple optimizations).

67.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu.

67.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu'.
Removed a total of 0 cells.

67.24.3. Executing OPT_DFF pass (perform DFF optimizations).

67.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

67.24.5. Finished fast OPT passes.

67.25. Executing HIERARCHY pass (managing design hierarchy).

67.25.1. Analyzing design hierarchy..
Top module:  \alu

67.25.2. Analyzing design hierarchy..
Top module:  \alu
Removed 0 unused modules.

67.26. Printing statistics.

=== alu ===

   Number of wires:                252
   Number of wire bits:            275
   Number of public wires:         252
   Number of public wire bits:     275
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2        5
     sky130_fd_sc_hd__a211oi_2       2
     sky130_fd_sc_hd__a21bo_2        8
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2        20
     sky130_fd_sc_hd__a21oi_2       15
     sky130_fd_sc_hd__a22o_2         9
     sky130_fd_sc_hd__a22oi_2        4
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a311o_2        4
     sky130_fd_sc_hd__a31o_2        10
     sky130_fd_sc_hd__and2_2         8
     sky130_fd_sc_hd__and2b_2        5
     sky130_fd_sc_hd__and3_2        13
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         8
     sky130_fd_sc_hd__buf_1         15
     sky130_fd_sc_hd__inv_2          3
     sky130_fd_sc_hd__nand2_2       22
     sky130_fd_sc_hd__nand3_2       13
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        4
     sky130_fd_sc_hd__nor2_2        11
     sky130_fd_sc_hd__o211a_2        2
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2         5
     sky130_fd_sc_hd__o21ai_2        8
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o22a_2         6
     sky130_fd_sc_hd__o2bb2a_2       4
     sky130_fd_sc_hd__o311a_2        2
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__or2_2         10
     sky130_fd_sc_hd__or2b_2         3
     sky130_fd_sc_hd__or3_2          6
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__xnor2_2        9
     sky130_fd_sc_hd__xor2_2         8

67.27. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.
[INFO]: USING STRATEGY AREA 0

68. Executing ABC pass (technology mapping using ABC).

68.1. Extracting gate netlist of module `\alu' to `/tmp/yosys-abc-vrP7Zd/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

69. Executing SETUNDEF pass (replace undef values with defined constants).

70. Executing HILOMAP pass (mapping to constant drivers).

71. Executing SPLITNETS pass (splitting up multi-bit signals).

72. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu..

73. Executing INSBUF pass (insert buffer cells for connected wires).

74. Executing CHECK pass (checking for obvious problems).
Checking module alu...
Found and reported 0 problems.

75. Printing statistics.

=== alu ===

   Number of wires:                252
   Number of wire bits:            275
   Number of public wires:         252
   Number of public wire bits:     275
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                256
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2        5
     sky130_fd_sc_hd__a211oi_2       2
     sky130_fd_sc_hd__a21bo_2        8
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2        20
     sky130_fd_sc_hd__a21oi_2       15
     sky130_fd_sc_hd__a22o_2         9
     sky130_fd_sc_hd__a22oi_2        4
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a311o_2        4
     sky130_fd_sc_hd__a31o_2        10
     sky130_fd_sc_hd__and2_2         8
     sky130_fd_sc_hd__and2b_2        5
     sky130_fd_sc_hd__and3_2        13
     sky130_fd_sc_hd__and3b_2        2
     sky130_fd_sc_hd__and4_2         8
     sky130_fd_sc_hd__buf_1         15
     sky130_fd_sc_hd__inv_2          3
     sky130_fd_sc_hd__nand2_2       22
     sky130_fd_sc_hd__nand3_2       13
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        4
     sky130_fd_sc_hd__nor2_2        11
     sky130_fd_sc_hd__o211a_2        2
     sky130_fd_sc_hd__o211ai_2       1
     sky130_fd_sc_hd__o21a_2         5
     sky130_fd_sc_hd__o21ai_2        8
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2        1
     sky130_fd_sc_hd__o22a_2         6
     sky130_fd_sc_hd__o2bb2a_2       4
     sky130_fd_sc_hd__o311a_2        2
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__o32a_2         1
     sky130_fd_sc_hd__or2_2         10
     sky130_fd_sc_hd__or2b_2         3
     sky130_fd_sc_hd__or3_2          6
     sky130_fd_sc_hd__or3b_2         1
     sky130_fd_sc_hd__xnor2_2        9
     sky130_fd_sc_hd__xor2_2         8

   Chip area for module '\alu': 2298.454400

76. Executing Verilog backend.
Dumping module `\alu'.

77. Executing JSON backend.

End of script. Logfile hash: cf6cbcb29e, CPU: user 0.52s system 0.02s, MEM: 44.57 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 46% 4x abc (0 sec), 17% 4x read_liberty (0 sec), ...
