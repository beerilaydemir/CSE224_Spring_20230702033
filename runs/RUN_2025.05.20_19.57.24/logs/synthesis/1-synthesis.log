
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /home/beeri/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/project3/src/ZeroToFiveCounter.v
Parsing SystemVerilog input from `/openlane/designs/project3/src/ZeroToFiveCounter.v' to AST representation.
Storing AST representation for module `$abstract\ZeroToFiveCounter'.
Storing AST representation for module `$abstract\SevenSegmentDisplay'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

4. Executing AST frontend in derive mode using pre-parsed AST for module `\ZeroToFiveCounter'.
Generating RTLIL representation for module `\ZeroToFiveCounter'.
/openlane/designs/project3/src/ZeroToFiveCounter.v:50: Warning: Identifier `\one_second_enable' is implicitly declared.

4.1. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter

4.2. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter
Removing unused module `$abstract\SevenSegmentDisplay'.
Removing unused module `$abstract\ZeroToFiveCounter'.
Removed 2 unused modules.

5. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/project3/runs/RUN_2025.05.20_19.57.24/tmp/synthesis/hierarchy.dot'.
Dumping module ZeroToFiveCounter to page 1.
Renaming module ZeroToFiveCounter to ZeroToFiveCounter.

6. Executing TRIBUF pass.

7. Executing HIERARCHY pass (managing design hierarchy).

7.1. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter

7.2. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter
Removed 0 unused modules.

8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

9. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:52$6 in module ZeroToFiveCounter.
Marked 2 switch rules as full_case in process $proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:32$1 in module ZeroToFiveCounter.
Removed a total of 0 dead cases.

10. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 0 assignments to connections.

11. Executing PROC_INIT pass (extract init attributes).

12. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \rst in `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:52$6'.
Found async reset \rst in `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:32$1'.

13. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

14. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:52$6'.
     1/1: $0\count[3:0]
Creating decoders for process `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:32$1'.
     1/2: $0\clk_1hz[0:0]
     2/2: $0\one_second_counter[26:0]

15. Executing PROC_DLATCH pass (convert process syncs to latches).

16. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ZeroToFiveCounter.\count' using process `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:52$6'.
  created $adff cell `$procdff$21' with positive edge clock and positive level reset.
Creating register for signal `\ZeroToFiveCounter.\one_second_counter' using process `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:32$1'.
  created $adff cell `$procdff$22' with positive edge clock and positive level reset.
Creating register for signal `\ZeroToFiveCounter.\clk_1hz' using process `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:32$1'.
  created $adff cell `$procdff$23' with positive edge clock and positive level reset.

17. Executing PROC_MEMWR pass (convert process memory writes to cells).

18. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:52$6'.
Removing empty process `ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:52$6'.
Found and cleaned up 1 empty switch in `\ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:32$1'.
Removing empty process `ZeroToFiveCounter.$proc$/openlane/designs/project3/src/ZeroToFiveCounter.v:32$1'.
Cleaned up 3 empty switches.

19. Executing CHECK pass (checking for obvious problems).
Checking module ZeroToFiveCounter...
Warning: Wire ZeroToFiveCounter.\AN [7] is used but has no driver.
Warning: Wire ZeroToFiveCounter.\AN [6] is used but has no driver.
Warning: Wire ZeroToFiveCounter.\AN [5] is used but has no driver.
Warning: Wire ZeroToFiveCounter.\AN [4] is used but has no driver.
Warning: Wire ZeroToFiveCounter.\AN [3] is used but has no driver.
Warning: Wire ZeroToFiveCounter.\AN [2] is used but has no driver.
Warning: Wire ZeroToFiveCounter.\AN [1] is used but has no driver.
Warning: Wire ZeroToFiveCounter.\AN [0] is used but has no driver.
Found and reported 8 problems.

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.
<suppressed ~1 debug messages>

21. Executing FLATTEN pass (flatten design).

22. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 2 unused cells and 10 unused wires.
<suppressed ~4 debug messages>

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

24.9. Finished OPT passes. (There is nothing left to do.)

25. Executing FSM pass (extract and optimize FSM).

25.1. Executing FSM_DETECT pass (finding FSMs in design).

25.2. Executing FSM_EXTRACT pass (extracting FSM from design).

25.3. Executing FSM_OPT pass (simple optimizations of FSMs).

25.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

25.5. Executing FSM_OPT pass (simple optimizations of FSMs).

25.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

25.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

25.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

26. Executing OPT pass (performing simple optimizations).

26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

26.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$21 ($adff) from module ZeroToFiveCounter (D = $0\count[3:0], Q = \count).

26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.
<suppressed ~1 debug messages>

26.9. Rerunning OPT passes. (Maybe there is more to do..)

26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

26.13. Executing OPT_DFF pass (perform DFF optimizations).

26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

26.16. Finished OPT passes. (There is nothing left to do.)

27. Executing WREDUCE pass (reducing word size of cells).
Removed top 5 bits (of 32) from port B of cell ZeroToFiveCounter.$ge$/openlane/designs/project3/src/ZeroToFiveCounter.v:39$2 ($ge).
Removed top 31 bits (of 32) from port B of cell ZeroToFiveCounter.$add$/openlane/designs/project3/src/ZeroToFiveCounter.v:44$3 ($add).
Removed top 5 bits (of 32) from port Y of cell ZeroToFiveCounter.$add$/openlane/designs/project3/src/ZeroToFiveCounter.v:44$3 ($add).
Removed top 31 bits (of 32) from mux cell ZeroToFiveCounter.$ternary$/openlane/designs/project3/src/ZeroToFiveCounter.v:50$5 ($mux).
Removed top 1 bits (of 4) from port B of cell ZeroToFiveCounter.$eq$/openlane/designs/project3/src/ZeroToFiveCounter.v:55$7 ($eq).
Removed top 3 bits (of 4) from port B of cell ZeroToFiveCounter.$add$/openlane/designs/project3/src/ZeroToFiveCounter.v:58$9 ($add).
Removed top 5 bits (of 32) from wire ZeroToFiveCounter.$add$/openlane/designs/project3/src/ZeroToFiveCounter.v:44$3_Y.

28. Executing PEEPOPT pass (run peephole optimizers).

29. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

30. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ZeroToFiveCounter:
  creating $macc model for $add$/openlane/designs/project3/src/ZeroToFiveCounter.v:44$3 ($add).
  creating $macc model for $add$/openlane/designs/project3/src/ZeroToFiveCounter.v:58$9 ($add).
  creating $alu model for $macc $add$/openlane/designs/project3/src/ZeroToFiveCounter.v:58$9.
  creating $alu model for $macc $add$/openlane/designs/project3/src/ZeroToFiveCounter.v:44$3.
  creating $alu model for $ge$/openlane/designs/project3/src/ZeroToFiveCounter.v:39$2 ($ge): new $alu
  creating $alu model for $eq$/openlane/designs/project3/src/ZeroToFiveCounter.v:50$4 ($eq): merged with $ge$/openlane/designs/project3/src/ZeroToFiveCounter.v:39$2.
  creating $alu cell for $ge$/openlane/designs/project3/src/ZeroToFiveCounter.v:39$2, $eq$/openlane/designs/project3/src/ZeroToFiveCounter.v:50$4: $auto$alumacc.cc:485:replace_alu$29
  creating $alu cell for $add$/openlane/designs/project3/src/ZeroToFiveCounter.v:44$3: $auto$alumacc.cc:485:replace_alu$42
  creating $alu cell for $add$/openlane/designs/project3/src/ZeroToFiveCounter.v:58$9: $auto$alumacc.cc:485:replace_alu$45
  created 3 $alu and 0 $macc cells.

31. Executing SHARE pass (SAT-based resource sharing).

32. Executing OPT pass (performing simple optimizations).

32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

32.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

32.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

32.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

32.6. Executing OPT_DFF pass (perform DFF optimizations).

32.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

32.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

32.9. Rerunning OPT passes. (Maybe there is more to do..)

32.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

32.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

32.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

32.13. Executing OPT_DFF pass (perform DFF optimizations).

32.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

32.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

32.16. Finished OPT passes. (There is nothing left to do.)

33. Executing MEMORY pass.

33.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

33.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

33.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

33.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

33.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

33.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

33.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

33.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

33.10. Executing MEMORY_COLLECT pass (generating $mem cells).

34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.
<suppressed ~8 debug messages>

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

35.3. Executing OPT_DFF pass (perform DFF optimizations).

35.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

35.5. Finished fast OPT passes.

36. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

37.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

37.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

37.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

37.6. Executing OPT_SHARE pass.

37.7. Executing OPT_DFF pass (perform DFF optimizations).

37.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

37.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

37.10. Finished OPT passes. (There is nothing left to do.)

38. Executing TECHMAP pass (map to technology primitives).

38.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

38.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $or.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using template $paramod$956e79e8f8c5e64be7438155ae50a966e615cb04\_90_alu for cells of type $alu.
Using template $paramod$f02bbbf710bba6238f4bdfa41b3051acfe2064a8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000011011 for cells of type $lcu.
No more expansions possible.
<suppressed ~642 debug messages>

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.
<suppressed ~330 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
<suppressed ~177 debug messages>
Removed a total of 59 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 65 unused cells and 243 unused wires.
<suppressed ~66 debug messages>

39.5. Finished fast OPT passes.

40. Executing ABC pass (technology mapping using ABC).

40.1. Extracting gate netlist of module `\ZeroToFiveCounter' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 190 wires to a netlist network with 31 inputs and 32 outputs.

40.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

40.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        6
ABC RESULTS:               AND cells:        3
ABC RESULTS:                OR cells:       19
ABC RESULTS:             ORNOT cells:       11
ABC RESULTS:               NOT cells:        4
ABC RESULTS:               NOR cells:       13
ABC RESULTS:              NAND cells:       19
ABC RESULTS:               XOR cells:       23
ABC RESULTS:            ANDNOT cells:       46
ABC RESULTS:        internal signals:      127
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       32
Removing temp directory.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

41.3. Executing OPT_DFF pass (perform DFF optimizations).

41.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 109 unused wires.
<suppressed ~2 debug messages>

41.5. Finished fast OPT passes.

42. Executing HIERARCHY pass (managing design hierarchy).

42.1. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter

42.2. Analyzing design hierarchy..
Top module:  \ZeroToFiveCounter
Removed 0 unused modules.

43. Printing statistics.

=== ZeroToFiveCounter ===

   Number of wires:                119
   Number of wire bits:            184
   Number of public wires:           5
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                174
     $_ANDNOT_                      46
     $_AND_                          3
     $_DFFE_PP0P_                    4
     $_DFF_PP0_                     27
     $_NAND_                        19
     $_NOR_                         12
     $_NOT_                          4
     $_ORNOT_                       11
     $_OR_                          19
     $_XNOR_                         6
     $_XOR_                         23

44. Executing CHECK pass (checking for obvious problems).
Checking module ZeroToFiveCounter...
Found and reported 0 problems.

45. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/project3/runs/RUN_2025.05.20_19.57.24/tmp/synthesis/post_techmap.dot'.
Dumping module ZeroToFiveCounter to page 1.

46. Executing SHARE pass (SAT-based resource sharing).

47. Executing OPT pass (performing simple optimizations).

47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ZeroToFiveCounter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ZeroToFiveCounter.
Performed a total of 0 changes.

47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ZeroToFiveCounter'.
Removed a total of 0 cells.

47.6. Executing OPT_DFF pass (perform DFF optimizations).

47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ZeroToFiveCounter.

47.9. Finished OPT passes. (There is nothing left to do.)

48. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..

49. Printing statistics.

=== ZeroToFiveCounter ===

   Number of wires:                119
   Number of wire bits:            184
   Number of public wires:           5
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                174
     $_ANDNOT_                      46
     $_AND_                          3
     $_DFFE_PP0P_                    4
     $_DFF_PP0_                     27
     $_NAND_                        19
     $_NOR_                         12
     $_NOT_                          4
     $_ORNOT_                       11
     $_OR_                          19
     $_XNOR_                         6
     $_XOR_                         23

mapping tbuf

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/beeri/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/beeri/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing TECHMAP pass (map to technology primitives).

52.1. Executing Verilog-2005 frontend: /home/beeri/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/beeri/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

52.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

53. Executing SIMPLEMAP pass (map simple cells to gate primitives).

54. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

54.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\ZeroToFiveCounter':
  mapped 31 $_DFF_PN0_ cells to \sky130_fd_sc_hd__dfrtp_2 cells.

55. Printing statistics.

=== ZeroToFiveCounter ===

   Number of wires:                154
   Number of wire bits:            219
   Number of public wires:           5
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                209
     $_ANDNOT_                      46
     $_AND_                          3
     $_MUX_                          4
     $_NAND_                        19
     $_NOR_                         12
     $_NOT_                         35
     $_ORNOT_                       11
     $_OR_                          19
     $_XNOR_                         6
     $_XOR_                         23
     sky130_fd_sc_hd__dfrtp_2       31

[INFO]: USING STRATEGY AREA 0

56. Executing ABC pass (technology mapping using ABC).

56.1. Extracting gate netlist of module `\ZeroToFiveCounter' to `/tmp/yosys-abc-oxXKtQ/input.blif'..
Extracted 178 gates and 210 wires to a netlist network with 32 inputs and 62 outputs.

56.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-oxXKtQ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-oxXKtQ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-oxXKtQ/input.blif 
ABC: + read_lib -w /openlane/designs/project3/runs/RUN_2025.05.20_19.57.24/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.04 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/project3/runs/RUN_2025.05.20_19.57.24/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.06 sec
ABC: Memory =    9.54 MB. Time =     0.06 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/project3/runs/RUN_2025.05.20_19.57.24/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/project3/runs/RUN_2025.05.20_19.57.24/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (2075.23 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    175 ( 38.3 %)   Cap = 14.8 ff (  6.7 %)   Area =     1164.87 ( 61.7 %)   Delay =  2130.61 ps  ( 24.6 %)               
ABC: Path  0 --      12 : 0    6 pi                      A =   0.00  Df =  56.5  -31.0 ps  S =  84.6 ps  Cin =  0.0 ff  Cout =  17.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      95 : 4    8 sky130_fd_sc_hd__and4_2 A =  10.01  Df = 324.5  -66.2 ps  S = 105.7 ps  Cin =  1.5 ff  Cout =  14.0 ff  Cmax = 300.3 ff  G =  888  
ABC: Path  2 --     174 : 4    4 sky130_fd_sc_hd__and4_2 A =  10.01  Df = 559.9  -81.5 ps  S =  69.2 ps  Cin =  1.5 ff  Cout =   6.3 ff  Cmax = 300.3 ff  G =  397  
ABC: Path  3 --     210 : 4    1 sky130_fd_sc_hd__and4_2 A =  10.01  Df = 764.5  -74.8 ps  S =  47.4 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 300.3 ff  G =  138  
ABC: Path  4 --     211 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1048.0 -176.3 ps  S = 337.5 ps  Cin =  2.1 ff  Cout =  28.3 ff  Cmax = 130.0 ff  G = 1276  
ABC: Path  5 --     232 : 4    2 sky130_fd_sc_hd__or4b_2 A =  10.01  Df =1687.2 -560.5 ps  S = 115.6 ps  Cin =  1.5 ff  Cout =   6.6 ff  Cmax = 265.5 ff  G =  429  
ABC: Path  6 --     233 : 3    1 sky130_fd_sc_hd__and3_2 A =   7.51  Df =1916.2 -409.6 ps  S =  40.0 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 309.5 ff  G =  141  
ABC: Path  7 --     234 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =2130.6 -302.5 ps  S = 396.5 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi11 (\one_second_counter [1]).  End-point = po29 ($0\one_second_counter[26:0] [25]).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   32/   62  lat =    0  nd =   175  edge =    393  area =1164.85  delay = 7.00  lev = 7
ABC: + write_blif /tmp/yosys-abc-oxXKtQ/output.blif 

56.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       27
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       40
ABC RESULTS:        internal signals:      116
ABC RESULTS:           input signals:       32
ABC RESULTS:          output signals:       62
Removing temp directory.

57. Executing SETUNDEF pass (replace undef values with defined constants).

58. Executing HILOMAP pass (mapping to constant drivers).

59. Executing SPLITNETS pass (splitting up multi-bit signals).

60. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ZeroToFiveCounter..
Removed 0 unused cells and 218 unused wires.
<suppressed ~1 debug messages>

61. Executing INSBUF pass (insert buffer cells for connected wires).

62. Executing CHECK pass (checking for obvious problems).
Checking module ZeroToFiveCounter...
Found and reported 0 problems.

63. Printing statistics.

=== ZeroToFiveCounter ===

   Number of wires:                206
   Number of wire bits:            216
   Number of public wires:          31
   Number of public wire bits:      41
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                214
     sky130_fd_sc_hd__a211o_2        1
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2         5
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a31o_2         9
     sky130_fd_sc_hd__a41o_2         2
     sky130_fd_sc_hd__and2_2         7
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2        24
     sky130_fd_sc_hd__and3b_2        3
     sky130_fd_sc_hd__and4_2         7
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1         27
     sky130_fd_sc_hd__conb_1         8
     sky130_fd_sc_hd__dfrtp_2       31
     sky130_fd_sc_hd__inv_2         40
     sky130_fd_sc_hd__nand2_2       13
     sky130_fd_sc_hd__nand3_2        4
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nor2_2         2
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__o211a_2        7
     sky130_fd_sc_hd__o311a_2        1
     sky130_fd_sc_hd__o31a_2         1
     sky130_fd_sc_hd__or2_2         10
     sky130_fd_sc_hd__or4_2          1
     sky130_fd_sc_hd__or4b_2         3
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         1

   Chip area for module '\ZeroToFiveCounter': 2009.427200

64. Executing Verilog backend.
Dumping module `\ZeroToFiveCounter'.

65. Executing JSON backend.

Warnings: 9 unique messages, 9 total
End of script. Logfile hash: e3d571fb2a, CPU: user 0.45s system 0.04s, MEM: 42.44 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 40% 2x abc (0 sec), 19% 2x read_liberty (0 sec), ...
